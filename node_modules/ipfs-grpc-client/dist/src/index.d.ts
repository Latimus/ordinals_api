/**
 * @param {Options} [opts]
 */
export function create(opts?: import("./types").Options | undefined): {
    addAll: (source: import("ipfs-core-types/src/utils.js").ImportCandidateStream, options?: (import("ipfs-core-types/src/root.js").AddAllOptions & import("ipfs-core-types/src/utils.js").AbortOptions) | undefined) => AsyncIterable<import("ipfs-core-types/src/root.js").AddResult>;
    id: (options?: import("ipfs-core-types/src/root.js").IDOptions | undefined) => Promise<import("ipfs-core-types/src/root.js").IDResult>;
    files: {
        ls: (ipfsPath: import("ipfs-core-types/src/utils.js").IPFSPath, options?: import("ipfs-core-types/src/utils.js").AbortOptions | undefined) => AsyncIterable<import("ipfs-core-types/src/files/index.js").MFSEntry>;
        write: (ipfsPath: string, content: string | Uint8Array | AsyncIterable<Uint8Array> | Iterable<Uint8Array> | Blob, options?: import("ipfs-core-types/src/files/index.js").WriteOptions | undefined) => Promise<void>;
    };
    pubsub: {
        subscribe: (topic: string, handler: import("@libp2p/interfaces/dist/src/events.js").EventHandler<import("@libp2p/interface-pubsub").Message>, options?: import("ipfs-core-types/src/pubsub/index.js").SubscribeOptions | undefined) => Promise<void>;
        unsubscribe: (topic: string, handler?: import("@libp2p/interfaces/dist/src/events.js").EventHandler<import("@libp2p/interface-pubsub").Message> | undefined, options?: import("ipfs-core-types/src/utils.js").AbortOptions | undefined) => Promise<void>;
    };
};
export type Options = import('./types').Options;
//# sourceMappingURL=index.d.ts.map